services:
  nginx:
    build:
      context: ./infrastructure/nginx
    ports:
      - "80:80"
    depends_on:
      - web-app
      - auth-service
      - tasks-service
    command: ["/wait-for-services.sh"]

  kong:
    image: kong:3.6
    depends_on:
      - kong-database
      - kong-migrations
    restart: on-failure
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    ports:
      - "8000:8000"   # Public gateway
      - "8001:8001"   # Admin API

  kong-deck-sync:
    image: kong/deck:latest
    depends_on:
      - kong
    volumes:
      - ./infrastructure/kong:/config
    environment:
      DECK_KONG_ADDR: http://kong:8001
    entrypoint:
      - /bin/sh
      - -c
      - |
        until deck gateway ping --kong-addr http://kong:8001; do
          echo "⏳ Waiting for Kong…"
          sleep 2
        done
        echo "✅ Kong is ready. Running deck gateway sync..."
        deck gateway sync /config/deck.yaml
    # entrypoint: ["tail", "-f", "/dev/null"]

  kong-migrations:
    image: kong:3.6
    depends_on:
      - kong-database
    command: kong migrations bootstrap
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong

  kong-database:
    image: postgres:13
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
    ports:
      - "5432:5432"
    volumes:
      - kong-db-data:/var/lib/postgresql/data

  rabbitmq:
    image: rabbitmq:4.1-management
    ports:
      - "5672:5672"  # RabbitMQ default port
      - "15672:15672"  # RabbitMQ management UI
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASSWORD}

  web-app:
    build:
      context: ./apps/web_app
    ports:
      - "5173:5173"
    environment:
      - NODE_ENV=production
    env_file:
      - ./apps/web_app/.env

  auth-service:
    build:
      context: ./services/auth
    ports:
      - "1111:1111"
    environment:
      - NODE_ENV=production
    env_file:
      - ./services/auth/.env
    depends_on:
      - auth-database

  auth-database:
    image: "mysql:latest"
    ports:
        - "6843:3306"
    environment:
      MYSQL_ROOT_PASSWORD: "password"
      MYSQL_DATABASE: ${AUTH_DB_NAME}
      MYSQL_USER: ${AUTH_DB_USER}
      MYSQL_PASSWORD: ${AUTH_DB_PASSWORD}
      MYSQL_PORT: 3306
    volumes:
      - auth-data:/var/lib/mysql
      - ./infrastructure/database-inits/auth.sql:/docker-entrypoint-initdb.d/init.sql
    env_file:
      - .env

  tasks-service:
    build:
      context: ./services/tasks
    ports:
      - "2222:2222"
    environment:
      - NODE_ENV=production
    env_file:
      - ./services/tasks/.env
    depends_on:
      - tasks-database

  tasks-database:
    image: "mysql:latest"
    ports:
        - "6844:3306"
    environment:
      MYSQL_ROOT_PASSWORD: "password"
      MYSQL_DATABASE: ${TASKS_DB_NAME}
      MYSQL_USER: ${TASKS_DB_USER}
      MYSQL_PASSWORD: ${TASKS_DB_PASSWORD}
      MYSQL_PORT: 3306
    volumes:
      - tasks-data:/var/lib/mysql
      - ./infrastructure/database-inits/tasks.sql:/docker-entrypoint-initdb.d/init.sql
    env_file:
      - .env

  notifications-service:
    build:
      context: ./services/notifications
    ports:
      - "3333:3333"
    environment:
      - NODE_ENV=production
    env_file:
      - ./services/notifications/.env
    depends_on:
      - rabbitmq

  notifications-redis:
    image: redis:7
    ports:
      - "6380:6379"  # Expose only for debugging if needed
    volumes:
      - redis-data:/data

  suggestions-service:
    build:
      context: ./services/suggestions
    ports:
      - "4444:4444"
    environment:
      - NODE_ENV=production

# TODO: In prod, containerize app and services and only allow requests within the docker network
volumes:
  kong-db-data:
  auth-data:
  tasks-data:
  rabbitmq-data:
  redis-data: