services:
  api-gateway:
    build:
      context: ./api-gateway
    ports:
      - "80:80"
    depends_on:
      - web-app
      - auth-service
      - tasks-service
    command: ["/wait-for-services.sh"]

  web-app:
    build:
      context: ./apps/web_app
    ports:
      - "5173:5173"
    environment:
      - NODE_ENV=production
    env_file:
      - ./apps/web_app/.env

  auth-service:
    build:
      context: ./services/auth
    ports:
      - "1111:1111"
    environment:
      - NODE_ENV=production
    env_file:
      - ./services/auth/.env
    depends_on:
      - auth-database

  auth-database:
    image: "mysql:latest"
    ports:
        - "6843:3306"
    environment:
      MYSQL_ROOT_PASSWORD: "password"
      MYSQL_DATABASE: ${AUTH_DB_NAME}
      MYSQL_USER: ${AUTH_DB_USER}
      MYSQL_PASSWORD: ${AUTH_DB_PASSWORD}
      MYSQL_PORT: 3306
    volumes:
      - auth-data:/var/lib/mysql
    env_file:
      - .env

  tasks-service:
    build:
      context: ./services/tasks
    ports:
      - "2222:2222"
    environment:
      - NODE_ENV=production
    env_file:
      - ./services/tasks/.env
    depends_on:
      - tasks-database

  tasks-database:
    image: "mysql:latest"
    ports:
        - "6844:3306"
    environment:
      MYSQL_ROOT_PASSWORD: "password"
      MYSQL_DATABASE: ${TASKS_DB_NAME}
      MYSQL_USER: ${TASKS_DB_USER}
      MYSQL_PASSWORD: ${TASKS_DB_PASSWORD}
      MYSQL_PORT: 3306
    volumes:
      - tasks-data:/var/lib/mysql
    env_file:
      - .env

  notification-service:
    build:
      context: ./services/notifications
    ports:
      - "3333:3333"
    environment:
      - NODE_ENV=production
    env_file:
      - ./services/notifications/.env
    depends_on:
      - rabbitmq

  rabbitmq:
    image: rabbitmq:4.1-management
    ports:
      - "5672:5672"  # RabbitMQ default port
      - "15672:15672"  # RabbitMQ management UI
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${NOTIFICATION_MQ_USER}
      RABBITMQ_DEFAULT_PASS: ${NOTIFICATION_MQ_PASSWORD}

# TODO: In prod, containerize app and services and only allow requests within the docker network
volumes:
  auth-data:
  tasks-data:
  rabbitmq-data: